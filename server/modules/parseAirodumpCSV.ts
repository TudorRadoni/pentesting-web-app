interface AccessPoint {
  BSSID: string;
  // firstTimeSeen: string;
  // lastTimeSeen: string;
  channel: number;
  // speed: number;
  // privacy: string;
  // cipher: string;
  // authentication: string;
  power: number;
  // beacons: number;
  // IV: number;
  // LANIP: string;
  // IDLength: number;
  ESSID: string;
  // key: string;
}

function parseAirodumpOutput(output: string): AccessPoint[] {
  const lines = output.split("\n");
  const accessPoints: AccessPoint[] = [];

  // Start from index 2 (skip the first two lines of the CSV file)
  // because the first line is empty and the second line is the header
  for (let i = 2; i < lines.length; i++) {
    const fields = lines[i].split(",");
    if (fields.length < 15) continue; // skip invalid lines

    const accessPoint: AccessPoint = {
      BSSID: fields[0].trim(),
      // firstTimeSeen: fields[1].trim(),
      // lastTimeSeen: fields[2].trim(),
      channel: parseInt(fields[3].trim()),
      // speed: parseInt(fields[4].trim()),
      // privacy: fields[5].trim(),
      // cipher: fields[6].trim(),
      // authentication: fields[7].trim(),
      power: parseInt(fields[8].trim()),
      // beacons: parseInt(fields[9].trim()),
      // IV: parseInt(fields[10].trim()),
      // LANIP: fields[11].trim(),
      // IDLength: parseInt(fields[12].trim()),
      ESSID: fields[13].trim(),
      // key: fields[14].trim(),
    };

    accessPoints.push(accessPoint);
  }

  return accessPoints;
}

export default parseAirodumpOutput;
