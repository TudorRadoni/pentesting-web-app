import React, { useState, useEffect } from "react";
import useIwconfig from "./useIwconfig";
import axios from "axios";

const InterfaceSelector = () => {
  const { wifiIfaces, nonWifiCount, error } = useIwconfig();
  const maxIfaces = wifiIfaces.length + nonWifiCount;
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const delay = 3000; // 3 seconds

    const timer = setTimeout(() => {
      setIsLoading(false);
    }, delay);

    return () => clearTimeout(timer);
  }, []);

  const handleInterfaceClick = async (iface: string) => {
    try {
      const response = await axios.post(
        "http://localhost:3001/selected-interface",
        { iface }
      );
      console.log(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  if (isLoading) {
    return (
      <p className="text-blue-500 italic">Fetching a list of interfaces...</p>
    );
  }

  if (error) {
    return <p className="text-red-500 italic">Error: {error}</p>;
  }

  if (maxIfaces === 0) {
    return (
      <p className="text-gray-700 italic">
        No interfaces available. Please ensure at least one interface supports
        monitor mode.
      </p>
    );
  }

  return (
    <>
      {nonWifiCount === 1 && (
        <p className="text-gray-700 italic">
          1 out of {maxIfaces} interfaces does not support wifi (not shown)
        </p>
      )}
      {nonWifiCount > 1 && (
        <p className="text-gray-700 italic">
          {nonWifiCount} out of {maxIfaces} interfaces do not support wifi (not
          shown)
        </p>
      )}

      {wifiIfaces.map((iface: string, index: number) => {
        const buttonClassName = iface.endsWith("mon")
          ? "mt-2 sm:mt-4 inline-flex items-center px-2 sm:px-4 py-1 sm:py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
          : "mt-2 sm:mt-4 inline-flex items-center px-2 sm:px-4 py-1 sm:py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500";

        return (
          <button
            key={index}
            className={buttonClassName}
            onClick={() => handleInterfaceClick(iface)}
          >
            {iface}
          </button>
        );
      })}
    </>
  );
};

export default InterfaceSelector;
