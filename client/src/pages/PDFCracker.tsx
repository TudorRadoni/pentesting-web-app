import React, { useState, useContext } from "react";
import axios from "axios";
import johnLogo from "../images/john.svg";
import pdfLogo from "../images/pdf.png";
import { ThemeContext } from "../ThemeContext";

const PDFCracker = () => {
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const { theme } = useContext(ThemeContext);

  const uploadPDF = async () => {
    if (!selectedFile) {
      setError("Please select a PDF file before uploading.");
      return;
    }

    try {
      const formData = new FormData();
      formData.append("pdfFile", selectedFile, selectedFile.name);

      const response = await axios.post(
        "http://localhost:3001/pdf-cracker/upload-and-crack-pdf",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      setResult(response.data);
      setError(null);
    } catch (error) {
      setError("Some error occurred :(");
    }
  };

  const clearJohnCache = async () => {
    try {
      const response = await axios.post(
        "http://localhost:3001/pdf-cracker/clear-john-cache",
      );
      
      setResult(response.data);
      setError(null);
    }
    catch (error) {
      setError("Some error occurred :(");
    }
  };

  return (
    <div
      className={`flex flex-col items-center justify-center min-h-screen py-2 sm:py-12 px-2 sm:px-4 lg:px-8 ${
        theme === "dark"
          ? "bg-gray-900 text-gray-100"
          : "bg-gray-100 text-gray-900"
      }`}
      style={{
        backgroundImage:
          theme === "dark"
            ? `radial-gradient(circle 1px, rgba(255,255,255,0.2) 1px, transparent 1px)`
            : `radial-gradient(circle 1px, rgba(0,0,0,0.2) 1px, transparent 1px)`,
        backgroundSize: "35px 35px",
      }}
    >
      <div className="flex items-center justify-center space-x-2 sm:space-x-4">
        <img
          src={johnLogo.toString()}
          alt="John the Ripper Logo"
          className="mb-2 sm:mb-4 w-16 sm:w-32"
        />
        <span className="text-xl sm:text-3xl">x</span>
        <img
          src={pdfLogo.toString()}
          alt="PDF Logo"
          className="mb-2 sm:mb-4 w-12 sm:w-24"
        />
      </div>
      <h1 className="text-xl sm:text-2xl font-bold mb-2 sm:mb-4">
        PDF Password Cracker
      </h1>

      <div className="border-2 border-gray-300 p-2 sm:p-4 rounded-md">
        <label className="block text-sm font-medium text-gray-700">
          Select PDF File:
          <input
            type="file"
            onChange={(e) => setSelectedFile(e.target.files?.[0] || null)}
            accept=".pdf"
            className="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
          />
        </label>
      </div>
      
      <button
        className="mt-2 sm:mt-4 inline-flex items-center px-2 sm:px-4 py-1 sm:py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        onClick={uploadPDF}
      >
        Upload PDF
      </button>

      <button
        className="mt-2 sm:mt-4 inline-flex items-center px-2 sm:px-4 py-1 sm:py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        onClick={clearJohnCache}
      >
        Clear John Cache
      </button>

      <h2
        className={`mt-2 sm:mt-4 text-lg sm:text-xl font-bold ${
          theme === "dark" ? "text-white" : "text-black"
        }`}
      >
        Result:
      </h2>
      <div className="mt-2 w-full max-w-md">
        {result && (
          <pre
            className={`overflow-x-auto p-2 sm:p-4 rounded-md shadow ${
              theme === "dark" ? "bg-black text-white" : "bg-white text-black"
            }`}
          >
            {result}
          </pre>
        )}
        {error && (
          <p
            className={`text-red-500 ${
              theme === "dark" ? "text-red-300" : "text-red-500"
            }`}
          >
            {error}
          </p>
        )}
      </div>
    </div>
  );
}

export default PDFCracker;
