import React, { useState, useContext, useEffect } from "react";
import hydraLogo from "../images/hydra-thc.png";
import sshLogoDark from "../images/ssh-dark.png";
import sshLogoLight from "../images/ssh-light.png";

import { ThemeContext } from "../ThemeContext";

const SSHBruteForce = () => {
  const { theme } = useContext(ThemeContext);

  // IP, user and port state
  const [ipAddress, setIpAddress] = useState("");
  const [user, setUser] = useState("");
  const [port, setPort] = useState(22);

  // Wordlist state
  const [wordlists, setWordlists] = useState<string[]>([]);
  const [selectedWordlist, setSelectedWordlist] = useState("");

  // Hydra's output
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Get the wordlists from the server
  useEffect(() => {
    fetchWordlists();
  }, []);

  const fetchWordlists = async () => {
    try {
      const response = await fetch("http://localhost:3001/wordlists");
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      const data = await response.json();
      setWordlists(data.wordlists);
    } catch (error) {
      console.error("Error:", error);
    }
  };

  // Send data for Hydra to brute force SSH
  const handleSendData = async () => {
    try {
      const response = await fetch("http://localhost:3001/ssh-brute-force", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ip: ipAddress,
          user: user,
          port: port,
          wordlist: selectedWordlist,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error);
      }

      setResult(data.output);
      setError("");
    } catch (error) {
      console.error("Error:", error);
      setResult("");
      setError("Some error occured :(");
    }
  };

  return (
    <div
      className={`flex flex-col items-center justify-center h-screen p-6 sm:p-4 md:p-6 lg:p-8 xl:p-10 2xl:p-12 ${
        theme === "dark"
          ? "bg-gray-900 text-gray-100"
          : "bg-gray-100 text-gray-900"
      }`}
      style={{
        backgroundImage:
          theme === "dark"
            ? `radial-gradient(circle 1px, rgba(255,255,255,0.2) 1px, transparent 1px)`
            : `radial-gradient(circle 1px, rgba(0,0,0,0.2) 1px, transparent 1px)`,
        backgroundSize: "35px 35px",
      }}
    >
      <div className="flex items-center justify-center space-x-2 sm:space-x-4">
        <img
          src={hydraLogo.toString()}
          alt="John the Ripper Logo"
          className="mb-2 sm:mb-4 w-16 sm:w-32"
        />
        <span className="text-xl sm:text-3xl">x</span>
        <img
          src={
            theme === "dark" ? sshLogoDark.toString() : sshLogoLight.toString()
          }
          alt="PDF Logo"
          className="mb-2 sm:mb-4 w-12 sm:w-24"
        />
      </div>

      <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold mb-4 text-center">
        SSH Brute Force
      </h1>

      <h2 className="text-lg sm:text-xl font-bold mb-2 sm:mb-4">
        Let's gain access! Firstly, we need some information.
      </h2>

      <div className="flex flex-col sm:flex-row items-center mb-4">
        <input
          type="text"
          value={ipAddress}
          onChange={(e) => setIpAddress(e.target.value)}
          className={`flex-grow px-4 py-2 border ${
            theme === "dark" ? "border-gray-600" : "border-gray-300"
          } rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            theme === "dark"
              ? "text-gray-300 bg-gray-700"
              : "text-black bg-white"
          } mb-4 sm:mb-0 sm:mr-4`}
          placeholder="IP address or domain name"
        />

        <input
          type="text"
          value={user}
          onChange={(e) => setUser(e.target.value)}
          className={`px-4 py-2 border ${
            theme === "dark" ? "border-gray-600" : "border-gray-300"
          } rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            theme === "dark"
              ? "text-gray-300 bg-gray-700"
              : "text-black bg-white"
          } mb-4 sm:mb-0 sm:mr-4`}
          placeholder="Username"
        />

        <input
          type="number"
          value={port}
          onChange={(e) => setPort(parseInt(e.target.value))}
          className={`px-4 py-2 border ${
            theme === "dark" ? "border-gray-600" : "border-gray-300"
          } rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            theme === "dark"
              ? "text-gray-300 bg-gray-700"
              : "text-black bg-white"
          } mb-4 sm:mb-0 sm:mr-4`}
          placeholder="Port"
        />

        <select
          value={selectedWordlist}
          onChange={(e) => setSelectedWordlist(e.target.value)}
          className={`px-4 py-2 border ${
            theme === "dark" ? "border-gray-600" : "border-gray-300"
          } rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            theme === "dark"
              ? "text-gray-300 bg-gray-700"
              : "text-black bg-white"
          } mb-4 sm:mb-0 sm:mr-4`}
        >
          <option value="" disabled>
            Select a wordlist
          </option>
          {wordlists.map((wordlist) => (
            <option key={wordlist} value={wordlist}>
              {wordlist}
            </option>
          ))}
        </select>

        <button
          onClick={handleSendData}
          className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Go, go, go!
        </button>
      </div>

      <div className="mt-2 w-full sm:max-w-md lg:max-w-lg xl:max-w-xl">
        {result && (
          <pre
            className={`overflow-x-auto p-2 sm:p-4 rounded-md shadow ${
              theme === "dark" ? "bg-black text-white" : "bg-white text-black"
            }`}
          >
            {result}
          </pre>
        )}
        {error && (
          <pre
            className={`overflow-x-auto p-2 sm:p-4 rounded-md shadow ${
              theme === "dark"
                ? "bg-black text-red-500"
                : "bg-white text-red-500"
            }`}
          >
            {error}
          </pre>
        )}
      </div>
    </div>
  );
};

export default SSHBruteForce;
