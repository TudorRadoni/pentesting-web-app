import React, { useState, useContext, useEffect } from "react";
import { descriptions } from "../data/nmap-commands";
import { ThemeContext } from "../ThemeContext";

const Recon = () => {
  const { theme } = useContext(ThemeContext);
  const [selectedSwitches, setSelectedSwitches] = useState<string[]>([]);
  const [switchParams, setSwitchParams] = useState<{ [key: string]: string }>(
    {}
  );
  const [command, setCommand] = useState<string>("");
  const [output, setOutput] = useState<{ output: string }>();
  const [isRunning, setIsRunning] = useState(false);

  <pre className="text-2xl font-mono">{output && output.output}</pre>;

  const handleSwitchToggle = (switchItem: string) => {
    if (selectedSwitches.includes(switchItem)) {
      setSelectedSwitches([]);
      setSwitchParams({});
    } else {
      setSelectedSwitches([switchItem]);
      setSwitchParams({ [switchItem]: "" });
    }
  };

  const handleParamChange = (switchItem: string, value: string) => {
    setSwitchParams((prevParams) => ({ ...prevParams, [switchItem]: value }));
  };

  useEffect(() => {
    const command = `nmap ${selectedSwitches
      .map((s) => `${s} ${switchParams[s]}`)
      .join(" ")}`;
    setCommand(command);
  }, [selectedSwitches, switchParams]);

  let ws: WebSocket;
  const handleExecute = () => {
    if (!ws || ws.readyState !== WebSocket.OPEN) {
      ws = new WebSocket("ws://localhost:3002");

      ws.onopen = () => {
        console.log("Connected to WebSocket server");
        setOutput({ output: "" });
        setIsRunning(true);
        ws.send(JSON.stringify({ type: "nmap-scan", data: { command } }));
      };

      ws.onmessage = (event) => {
        const msg = JSON.parse(event.data);
        if (msg.type === "nmap-scan") {
          setOutput((prevOutput) => ({
            output: (prevOutput ? prevOutput.output : "") + msg.data,
          }));
        } else if (msg.type === "error") {
          console.error("Error:", msg.data);
        } else if (msg.type === "nmap-scan-done") {
          setIsRunning(false);
        }
      };
    } else {
      setOutput({ output: "" });
      setIsRunning(true);
      ws.send(JSON.stringify({ type: "nmap-scan", data: { command } }));
    }
  };

  return (
    <div
      className={`flex flex-col min-h-fit p-6 sm:p-4 md:p-6 lg:p-8 xl:p-10 2xl:p-12 ${
        theme === "dark"
          ? "bg-gray-900 text-gray-100"
          : "bg-gray-100 text-gray-900"
      }`}
    >
      {/* Command
      <div className="pb-8 flex-grow border-b border-gray-200">
        <div className="flex justify-between items-center">
          <h2 className="text-2xl font-bold mb-2">Command:</h2>
          <button
            className={`bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ${
              isRunning ? "opacity-50 cursor-not-allowed" : ""
            }`}
            onClick={handleExecute}
            disabled={isRunning}
          >
            Execute ⚙️
          </button>
        </div>
        <p className="text-2xl font-mono">{command}</p>
      </div> */}

      <div className="flex flex-col sm:flex-row gap-4">
        {/* Most used commands */}
        <div className="w-full sm:w-1/3 pr-4">
          <h2 className="text-2xl font-bold mb-2">Most used/common commands</h2>
          {/* Spawn preview buttons for each common nmap command */}
          {descriptions.map((desc, index) => (
            <div key={index} className="flex flex-col mb-2">
              <div className="flex justify-between items-center">
                <span>{desc.description}</span>
                <button
                  className={`mt-2 sm:mt-4 items-center px-2 sm:px-4 py-1 sm:py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white focus:outline-none focus:ring-2 focus:ring-offset-2 w-auto sm:w-auto transition duration-500 ease-in-out transform ${
                    selectedSwitches.includes(desc.switch)
                      ? "bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500"
                      : "bg-gray-600 text-gray-300 hover:bg-gray-700 focus:ring-gray-500"
                  }`}
                  onClick={() => handleSwitchToggle(desc.switch)}
                >
                  {selectedSwitches.includes(desc.switch)
                    ? "Cancel"
                    : "Preview"}
                </button>
              </div>
              {selectedSwitches.includes(desc.switch) && (
                <p className="mt-2 text-sm text-gray-500">
                  Example: {desc.example}
                </p>
              )}
            </div>
          ))}
        </div>

        {/* Parameters */}
        {/* <div className="w-full sm:w-1/3 px-4 border-t sm:border-t-0 sm:border-l border-gray-300">
          <h2 className="text-2xl font-bold mb-2">Parameters</h2>
          {descriptions.map(
            (desc, index) =>
              selectedSwitches.includes(desc.switch) && (
                <div className="flex items-center gap-2 mb-2">
                  <label
                    className="text-sm font-bold"
                    htmlFor={`param-${index}`}
                  >
                    {desc.switch}
                  </label>
                  <input
                    id={`param-${index}`}
                    type="text"
                    placeholder={desc.params}
                    className="flex-grow px-3 py-2 border rounded shadow appearance-none text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    onChange={(e) =>
                      handleParamChange(desc.switch, e.target.value)
                    }
                  />
                </div>
              )
          )}
        </div> */}

        {/* Command & Output */}
        <div className="w-full sm:w-2/3 px-4 border-t sm:border-t-0 sm:border-l border-gray-400">
          {/* Command */}
          <div className="pl-4 border-b border-gray-400">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold mb-2">Command</h2>
              <button
                className={`mb-2 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md ${
                  isRunning ? "opacity-50 cursor-not-allowed" : ""
                }`}
                onClick={handleExecute}
                disabled={isRunning}
              >
                Execute ⚙️
              </button>
            </div>
            {/* <p className="mb-2 text-2xl font-mono">{command}</p> */}

            {/* Parameters */}
            {descriptions.map(
              (desc, index) =>
                selectedSwitches.includes(desc.switch) && (
                  <div className="flex items-center gap-2 mb-4">
                    <label
                      className="text-l font-bold"
                      htmlFor={`param-${index}`}
                    >
                      {"nmap " + desc.switch}
                    </label>

                    <input
                      id={`param-${index}`}
                      type="text"
                      placeholder={desc.params}
                      className={`px-3 py-2 rounded shadow appearance-none leading-tight focus:outline-none focus:shadow-outline ${
                        theme === "dark"
                          ? "bg-gray-800 text-gray-100 border border-gray-700"
                          : "bg-gray-200 text-gray-900 border border-gray-300"
                      }`}
                      onChange={(e) =>
                        handleParamChange(desc.switch, e.target.value)
                      }
                    />
                  </div>
                )
            )}
          </div>

          {/* Output */}
          <div className="pl-4 pt-4 flex flex-col border-t sm:border-t-0">
            <div className="flex-1">
              <h2 className="text-2xl font-bold mb-2">Output</h2>
              <pre className="text-2xl font-mono">
                {output && output.output}
              </pre>{" "}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Recon;
