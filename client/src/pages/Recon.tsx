import React, { useState, useContext } from 'react';
import { descriptions } from '../data/nmap-commands';
import { ThemeContext } from '../ThemeContext';

const Recon = () => {
    const { theme } = useContext(ThemeContext);
    const [selectedSwitches, setSelectedSwitches] = useState<string[]>([]);
    const [switchParams, setSwitchParams] = useState<{ [key: string]: string }>({});
    const [command, setCommand] = useState<string>('');

    const handleSwitchToggle = (switchItem: string) => {
        if (selectedSwitches.includes(switchItem)) {
            setSelectedSwitches(selectedSwitches.filter((s) => s !== switchItem));
            setSwitchParams((prevParams) => {
                const newParams = { ...prevParams };
                delete newParams[switchItem];
                return newParams;
            });
        } else {
            setSelectedSwitches([...selectedSwitches, switchItem]);
            setSwitchParams((prevParams) => ({ ...prevParams, [switchItem]: '' }));
        }
    };

    const handleParamChange = (switchItem: string, value: string) => {
        setSwitchParams((prevParams) => ({ ...prevParams, [switchItem]: value }));
    };

    React.useEffect(() => {
        const command = `nmap ${selectedSwitches.map((s) => `${s} ${switchParams[s]}`).join(' ')}`;
        setCommand(command);
    }, [selectedSwitches, switchParams]);

    return (
        <div className={`flex flex-col h-screen p-6 ${theme === 'dark' ? 'bg-gray-900 text-gray-100' : 'bg-gray-100 text-gray-900'}`}>
        <div className="flex flex-grow-0 flex-shrink">
                <div className="w-1/3 pr-4">
                    <h2 className="text-2xl font-bold mb-2">Options:</h2>
                    {descriptions.map((desc, index) => (
                        <div key={index} className="flex justify-between items-center mb-2">
                            <span>{desc.description}</span>
                            <button 
                                className={`px-4 py-2 rounded transition duration-500 ease-in-out transform ${selectedSwitches.includes(desc.switch) ? 'bg-blue-500 text-white hover:bg-blue-700 hover:-translate-y-1 hover:scale-110' : 'bg-gray-200 text-black hover:bg-gray-300 hover:-translate-y-1 hover:scale-110'}`}
                                onClick={() => handleSwitchToggle(desc.switch)}
                            >
                                {desc.switch}
                            </button>
                        </div>
                    ))}
                </div>
                <div className="w-1/3 px-4 border-l border-r border-gray-300">
                    <h2 className="text-2xl font-bold mb-2">Parameters:</h2>
                    {descriptions.map((desc, index) => (
                        selectedSwitches.includes(desc.switch) && 
                        <div key={index} className="mb-2">
                            <label className="block text-sm font-bold mb-1" htmlFor={`param-${index}`}>{desc.switch}</label>
                            <input 
                                id={`param-${index}`} 
                                type="text" 
                                placeholder={desc.params} 
                                className="w-full px-3 py-2 border rounded shadow appearance-none text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                onChange={(e) => handleParamChange(desc.switch, e.target.value)}
                            />
                        </div>
                    ))}
                </div>
                <div className="w-1/3 pl-4 border-l border-gray-300 flex flex-col">
                    <div className="flex-1">
                        <h2 className="text-2xl font-bold mb-2">Output:</h2>
                        <p className="text-2xl font-mono">Placeholder for output</p>
                    </div>
                </div>
            </div>
            <div className="border-t border-gray-300 pt-4 flex-grow">
                <h2 className="text-2xl font-bold mb-2">Command:</h2>
                <p className="text-2xl font-mono">{command}</p>
            </div>
        </div>
    );
};

export default Recon;