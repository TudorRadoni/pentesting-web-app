import React, { useState, useContext, useEffect } from "react";
import { descriptions } from "../data/nmap-commands";
import { ThemeContext } from "../ThemeContext";

const Recon = () => {
  const { theme } = useContext(ThemeContext);
  const [selectedCheckboxes, setSelectedCheckboxes] = useState<string[]>([]);
  const [selectedRadio, setSelectedRadio] = useState<string>("");
  const [switchParams, setSwitchParams] = useState<{ [key: string]: string }>(
    {}
  );
  const [target, setTarget] = useState<string>("");
  const [ports, setPorts] = useState<string>("");
  const [command, setCommand] = useState<string>("");
  const [output, setOutput] = useState<{ output: string }>();
  const [isRunning, setIsRunning] = useState(false);

  const handleCheckboxToggle = (switchItem: string) => {
    setSelectedCheckboxes((prev) =>
      prev.includes(switchItem)
        ? prev.filter((cb) => cb !== switchItem)
        : [...prev, switchItem]
    );
  };

  const handleRadioChange = (switchItem: string) => {
    setSelectedRadio(switchItem);
  };

  const handleParamChange = (switchItem: string, value: string) => {
    setSwitchParams((prevParams) => ({ ...prevParams, [switchItem]: value }));
  };

  useEffect(() => {
    let command = "nmap";

    // Add selected checkboxes
    selectedCheckboxes.forEach((switchItem) => {
      command += ` ${switchItem}`;
    });

    // Add radio-selected switch, if any
    if (selectedRadio) {
      command += ` ${selectedRadio}`;
    }

    // Add target
    command += ` ${target}`;

    // Add ports
    if (ports.trim() !== "") {
      command += ` -p ${ports}`;
    }

    // Update the command state
    setCommand(command.trim());
  }, [selectedCheckboxes, selectedRadio, target, ports]);

  let ws: WebSocket;
  const handleExecute = () => {
    if (!ws || ws.readyState !== WebSocket.OPEN) {
      ws = new WebSocket("ws://" + window.location.hostname + ":3002");

      ws.onopen = () => {
        console.log("Connected to WebSocket server");
        setOutput({ output: "" });
        setIsRunning(true);
        ws.send(JSON.stringify({ type: "nmap-scan", data: { command } }));
      };

      ws.onmessage = (event) => {
        const msg = JSON.parse(event.data);
        if (msg.type === "nmap-scan") {
          setOutput((prevOutput) => ({
            output: (prevOutput ? prevOutput.output : "") + msg.data,
          }));
        } else if (msg.type === "error") {
          console.error("Error:", msg.data);
        } else if (msg.type === "nmap-scan-done") {
          setIsRunning(false);
        }
      };
    } else {
      setOutput({ output: "" });
      setIsRunning(true);
      ws.send(JSON.stringify({ type: "nmap-scan", data: { command } }));
    }
  };

  return (
    <div
      className={`min-h-screen ${
        theme === "dark"
          ? "bg-gray-900 text-gray-100"
          : "bg-gray-100 text-gray-900"
      }`}
      style={{
        backgroundImage:
          theme === "dark"
            ? `radial-gradient(circle 1px, rgba(255,255,255,0.2) 1px, transparent 1px)`
            : `radial-gradient(circle 1px, rgba(0,0,0,0.2) 1px, transparent 1px)`,
        backgroundSize: "35px 35px",
      }}
    >
      <div
        className={`container mx-auto px-4 py-8 ${
          theme === "dark"
            ? "bg-gray-900 text-gray-100"
            : "bg-gray-100 text-gray-900"
        }`}
      >
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Options Section */}
          <div
            className={`bg-white dark:bg-gray-800 shadow-lg rounded-lg p-4 ${
              theme === "dark" ? "text-gray-100" : "text-gray-900"
            }`}
          >
            <h2 className="text-xl font-semibold mb-4">Options</h2>
            {descriptions
              .filter((desc) => desc.type === "checkbox")
              .map((desc, index) => (
                <div
                  key={index}
                  className="flex justify-between items-center mb-2"
                >
                  <label
                    htmlFor={`checkbox-${desc.switch}`}
                    className="flex items-center cursor-pointer"
                  >
                    <input
                      id={`checkbox-${desc.switch}`}
                      type="checkbox"
                      checked={selectedCheckboxes.includes(desc.switch)}
                      onChange={() => handleCheckboxToggle(desc.switch)}
                      className="mr-2"
                    />
                    {desc.description}
                  </label>
                </div>
              ))}
          </div>

          {/* Scan Types Section */}
          <div
            className={`bg-white dark:bg-gray-800 shadow-lg rounded-lg p-4 col-span-2 ${
              theme === "dark" ? "text-gray-100" : "text-gray-900"
            }`}
          >
            <h2 className="text-xl font-semibold mb-4">Scan Types</h2>
            {descriptions
              .filter((desc) => desc.type === "radio")
              .map((desc, index) => (
                <div
                  key={index}
                  className="flex justify-between items-center mb-2"
                >
                  <label
                    htmlFor={`radio-${desc.switch}`}
                    className="flex items-center cursor-pointer"
                  >
                    <input
                      id={`radio-${desc.switch}`}
                      type="radio"
                      name="scanType"
                      value={desc.switch}
                      checked={selectedRadio === desc.switch}
                      onChange={() => handleRadioChange(desc.switch)}
                      className="mr-2"
                    />
                    {desc.description}
                  </label>
                </div>
              ))}
          </div>
        </div>

        {/* Target and Ports UI */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
          {/* Target input */}
          <div
            className={`bg-white dark:bg-gray-800 shadow-lg rounded-lg p-4 ${
              theme === "dark" ? "text-gray-100" : "text-gray-900"
            }`}
          >
            <label htmlFor="target" className="block text-sm font-medium mb-2">
              Target
            </label>
            <input
              type="text"
              id="target"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              className={`mt-1 block w-full shadow-sm sm:text-sm px-4 py-2 rounded-md focus:outline-none focus:ring-2 border ${
                theme === "dark"
                  ? "bg-gray-700 border-gray-600 text-white"
                  : "bg-white border-gray-300 text-gray-900"
              }`}
              placeholder="e.g., example.com or 192.168.1.2-254"
            />
          </div>
          {/* Ports input */}
          <div
            className={`bg-white dark:bg-gray-800 shadow-lg rounded-lg p-4 ${
              theme === "dark" ? "text-gray-100" : "text-gray-900"
            }`}
          >
            <label htmlFor="ports" className="block text-sm font-medium mb-2">
              Ports
            </label>
            <input
              type="text"
              id="ports"
              value={ports}
              onChange={(e) => setPorts(e.target.value)}
              className={`mt-1 block w-full shadow-sm sm:text-sm px-4 py-2 rounded-md focus:outline-none focus:ring-2 border ${
                theme === "dark"
                  ? "bg-gray-700 border-gray-600 text-white"
                  : "bg-white border-gray-300 text-gray-900"
              }`}
              placeholder="e.g., 80,443"
            />
          </div>
        </div>

        {/* Command & Output */}
        <div
          className={`bg-white dark:bg-gray-800 shadow-lg rounded-lg p-4 mt-6 ${
            theme === "dark" ? "text-gray-100" : "text-gray-900"
          }`}
        >
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold mb-4">Command</h2>
            <button
              className={`bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md ${
                isRunning ? "opacity-50 cursor-not-allowed" : ""
              }`}
              onClick={handleExecute}
              disabled={isRunning}
            >
              Execute ⚙️
            </button>
          </div>
          <p className="mb-2 text-xl font-mono">{command}</p>
          <h2 className="text-xl font-semibold mt-4 mb-4">Output</h2>
          <pre className="text-xl font-mono">{output && output.output}</pre>
        </div>
      </div>
    </div>
  );
};

export default Recon;
